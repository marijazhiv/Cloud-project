{
  "version": 3,
  "sources": ["../../../../../node_modules/@smithy/eventstream-serde-config-resolver/dist-es/EventStreamSerdeConfig.js", "../../../../../node_modules/@aws-crypto/crc32/node_modules/@smithy/util-utf8/dist-es/fromUtf8.browser.js", "../../../../../node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/convertToBuffer.js", "../../../../../node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/isEmptyData.js", "../../../../../node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/numToUint8.js", "../../../../../node_modules/@aws-crypto/crc32/node_modules/@aws-crypto/util/build/module/uint32ArrayFrom.js", "../../../../../node_modules/@aws-crypto/crc32/build/module/aws_crc32.js", "../../../../../node_modules/@aws-crypto/crc32/build/module/index.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/Int64.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/HeaderMarshaller.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/splitMessage.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/EventStreamCodec.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/MessageDecoderStream.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/MessageEncoderStream.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageDecoderStream.js", "../../../../../node_modules/@smithy/eventstream-codec/dist-es/SmithyMessageEncoderStream.js", "../../../../../node_modules/@smithy/eventstream-serde-universal/dist-es/getChunkedStream.js", "../../../../../node_modules/@smithy/eventstream-serde-universal/dist-es/getUnmarshalledStream.js", "../../../../../node_modules/@smithy/eventstream-serde-universal/dist-es/EventStreamMarshaller.js", "../../../../../node_modules/@smithy/eventstream-serde-browser/dist-es/utils.js", "../../../../../node_modules/@smithy/eventstream-serde-browser/dist-es/EventStreamMarshaller.js", "../../../../../node_modules/@smithy/eventstream-serde-browser/dist-es/provider.js"],
  "sourcesContent": ["export const resolveEventStreamSerdeConfig = (input) => ({\r\n    ...input,\r\n    eventStreamMarshaller: input.eventStreamSerdeProvider(input),\r\n});\r\n", "export const fromUtf8 = (input) => new TextEncoder().encode(input);\r\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\nimport { fromUtf8 as fromUtf8Browser } from \"@smithy/util-utf8\";\r\n// Quick polyfill\r\nvar fromUtf8 = typeof Buffer !== \"undefined\" && Buffer.from\r\n    ? function (input) { return Buffer.from(input, \"utf8\"); }\r\n    : fromUtf8Browser;\r\nexport function convertToBuffer(data) {\r\n    // Already a Uint8, do nothing\r\n    if (data instanceof Uint8Array)\r\n        return data;\r\n    if (typeof data === \"string\") {\r\n        return fromUtf8(data);\r\n    }\r\n    if (ArrayBuffer.isView(data)) {\r\n        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);\r\n    }\r\n    return new Uint8Array(data);\r\n}\r\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\nexport function isEmptyData(data) {\r\n    if (typeof data === \"string\") {\r\n        return data.length === 0;\r\n    }\r\n    return data.byteLength === 0;\r\n}\r\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\nexport function numToUint8(num) {\r\n    return new Uint8Array([\r\n        (num & 0xff000000) >> 24,\r\n        (num & 0x00ff0000) >> 16,\r\n        (num & 0x0000ff00) >> 8,\r\n        num & 0x000000ff,\r\n    ]);\r\n}\r\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\n// IE 11 does not support Array.from, so we do it manually\r\nexport function uint32ArrayFrom(a_lookUpTable) {\r\n    if (!Uint32Array.from) {\r\n        var return_array = new Uint32Array(a_lookUpTable.length);\r\n        var a_index = 0;\r\n        while (a_index < a_lookUpTable.length) {\r\n            return_array[a_index] = a_lookUpTable[a_index];\r\n            a_index += 1;\r\n        }\r\n        return return_array;\r\n    }\r\n    return Uint32Array.from(a_lookUpTable);\r\n}\r\n", "// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\r\n// SPDX-License-Identifier: Apache-2.0\r\nimport { __awaiter, __generator } from \"tslib\";\r\nimport { convertToBuffer, isEmptyData, numToUint8 } from \"@aws-crypto/util\";\r\nimport { Crc32 } from \"./index\";\r\nvar AwsCrc32 = /** @class */ (function () {\r\n    function AwsCrc32() {\r\n        this.crc32 = new Crc32();\r\n    }\r\n    AwsCrc32.prototype.update = function (toHash) {\r\n        if (isEmptyData(toHash))\r\n            return;\r\n        this.crc32.update(convertToBuffer(toHash));\r\n    };\r\n    AwsCrc32.prototype.digest = function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            return __generator(this, function (_a) {\r\n                return [2 /*return*/, numToUint8(this.crc32.digest())];\r\n            });\r\n        });\r\n    };\r\n    AwsCrc32.prototype.reset = function () {\r\n        this.crc32 = new Crc32();\r\n    };\r\n    return AwsCrc32;\r\n}());\r\nexport { AwsCrc32 };\r\n", "import { __values } from \"tslib\";\r\nimport { uint32ArrayFrom } from \"@aws-crypto/util\";\r\nexport function crc32(data) {\r\n    return new Crc32().update(data).digest();\r\n}\r\nvar Crc32 = /** @class */ (function () {\r\n    function Crc32() {\r\n        this.checksum = 0xffffffff;\r\n    }\r\n    Crc32.prototype.update = function (data) {\r\n        var e_1, _a;\r\n        try {\r\n            for (var data_1 = __values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {\r\n                var byte = data_1_1.value;\r\n                this.checksum =\r\n                    (this.checksum >>> 8) ^ lookupTable[(this.checksum ^ byte) & 0xff];\r\n            }\r\n        }\r\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\r\n        finally {\r\n            try {\r\n                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);\r\n            }\r\n            finally { if (e_1) throw e_1.error; }\r\n        }\r\n        return this;\r\n    };\r\n    Crc32.prototype.digest = function () {\r\n        return (this.checksum ^ 0xffffffff) >>> 0;\r\n    };\r\n    return Crc32;\r\n}());\r\nexport { Crc32 };\r\n// prettier-ignore\r\nvar a_lookUpTable = [\r\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA,\r\n    0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,\r\n    0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\r\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,\r\n    0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE,\r\n    0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\r\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC,\r\n    0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5,\r\n    0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\r\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B,\r\n    0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940,\r\n    0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\r\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116,\r\n    0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,\r\n    0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\r\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,\r\n    0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A,\r\n    0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\r\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818,\r\n    0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01,\r\n    0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\r\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457,\r\n    0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C,\r\n    0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\r\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2,\r\n    0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB,\r\n    0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\r\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9,\r\n    0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,\r\n    0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\r\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4,\r\n    0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD,\r\n    0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\r\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683,\r\n    0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8,\r\n    0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\r\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE,\r\n    0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7,\r\n    0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\r\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5,\r\n    0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252,\r\n    0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\r\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60,\r\n    0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,\r\n    0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\r\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F,\r\n    0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04,\r\n    0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\r\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A,\r\n    0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713,\r\n    0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\r\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21,\r\n    0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E,\r\n    0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\r\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C,\r\n    0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45,\r\n    0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\r\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB,\r\n    0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,\r\n    0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\r\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6,\r\n    0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,\r\n    0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\r\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,\r\n];\r\nvar lookupTable = uint32ArrayFrom(a_lookUpTable);\r\nexport { AwsCrc32 } from \"./aws_crc32\";\r\n", "import { toHex } from \"@smithy/util-hex-encoding\";\r\nexport class Int64 {\r\n    constructor(bytes) {\r\n        this.bytes = bytes;\r\n        if (bytes.byteLength !== 8) {\r\n            throw new Error(\"Int64 buffers must be exactly 8 bytes\");\r\n        }\r\n    }\r\n    static fromNumber(number) {\r\n        if (number > 9223372036854776000 || number < -9223372036854776000) {\r\n            throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);\r\n        }\r\n        const bytes = new Uint8Array(8);\r\n        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\r\n            bytes[i] = remaining;\r\n        }\r\n        if (number < 0) {\r\n            negate(bytes);\r\n        }\r\n        return new Int64(bytes);\r\n    }\r\n    valueOf() {\r\n        const bytes = this.bytes.slice(0);\r\n        const negative = bytes[0] & 0b10000000;\r\n        if (negative) {\r\n            negate(bytes);\r\n        }\r\n        return parseInt(toHex(bytes), 16) * (negative ? -1 : 1);\r\n    }\r\n    toString() {\r\n        return String(this.valueOf());\r\n    }\r\n}\r\nfunction negate(bytes) {\r\n    for (let i = 0; i < 8; i++) {\r\n        bytes[i] ^= 0xff;\r\n    }\r\n    for (let i = 7; i > -1; i--) {\r\n        bytes[i]++;\r\n        if (bytes[i] !== 0)\r\n            break;\r\n    }\r\n}\r\n", "import { fromHex, toHex } from \"@smithy/util-hex-encoding\";\r\nimport { Int64 } from \"./Int64\";\r\nexport class HeaderMarshaller {\r\n    constructor(toUtf8, fromUtf8) {\r\n        this.toUtf8 = toUtf8;\r\n        this.fromUtf8 = fromUtf8;\r\n    }\r\n    format(headers) {\r\n        const chunks = [];\r\n        for (const headerName of Object.keys(headers)) {\r\n            const bytes = this.fromUtf8(headerName);\r\n            chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));\r\n        }\r\n        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));\r\n        let position = 0;\r\n        for (const chunk of chunks) {\r\n            out.set(chunk, position);\r\n            position += chunk.byteLength;\r\n        }\r\n        return out;\r\n    }\r\n    formatHeaderValue(header) {\r\n        switch (header.type) {\r\n            case \"boolean\":\r\n                return Uint8Array.from([header.value ? 0 : 1]);\r\n            case \"byte\":\r\n                return Uint8Array.from([2, header.value]);\r\n            case \"short\":\r\n                const shortView = new DataView(new ArrayBuffer(3));\r\n                shortView.setUint8(0, 3);\r\n                shortView.setInt16(1, header.value, false);\r\n                return new Uint8Array(shortView.buffer);\r\n            case \"integer\":\r\n                const intView = new DataView(new ArrayBuffer(5));\r\n                intView.setUint8(0, 4);\r\n                intView.setInt32(1, header.value, false);\r\n                return new Uint8Array(intView.buffer);\r\n            case \"long\":\r\n                const longBytes = new Uint8Array(9);\r\n                longBytes[0] = 5;\r\n                longBytes.set(header.value.bytes, 1);\r\n                return longBytes;\r\n            case \"binary\":\r\n                const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));\r\n                binView.setUint8(0, 6);\r\n                binView.setUint16(1, header.value.byteLength, false);\r\n                const binBytes = new Uint8Array(binView.buffer);\r\n                binBytes.set(header.value, 3);\r\n                return binBytes;\r\n            case \"string\":\r\n                const utf8Bytes = this.fromUtf8(header.value);\r\n                const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));\r\n                strView.setUint8(0, 7);\r\n                strView.setUint16(1, utf8Bytes.byteLength, false);\r\n                const strBytes = new Uint8Array(strView.buffer);\r\n                strBytes.set(utf8Bytes, 3);\r\n                return strBytes;\r\n            case \"timestamp\":\r\n                const tsBytes = new Uint8Array(9);\r\n                tsBytes[0] = 8;\r\n                tsBytes.set(Int64.fromNumber(header.value.valueOf()).bytes, 1);\r\n                return tsBytes;\r\n            case \"uuid\":\r\n                if (!UUID_PATTERN.test(header.value)) {\r\n                    throw new Error(`Invalid UUID received: ${header.value}`);\r\n                }\r\n                const uuidBytes = new Uint8Array(17);\r\n                uuidBytes[0] = 9;\r\n                uuidBytes.set(fromHex(header.value.replace(/\\-/g, \"\")), 1);\r\n                return uuidBytes;\r\n        }\r\n    }\r\n    parse(headers) {\r\n        const out = {};\r\n        let position = 0;\r\n        while (position < headers.byteLength) {\r\n            const nameLength = headers.getUint8(position++);\r\n            const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));\r\n            position += nameLength;\r\n            switch (headers.getUint8(position++)) {\r\n                case 0:\r\n                    out[name] = {\r\n                        type: BOOLEAN_TAG,\r\n                        value: true,\r\n                    };\r\n                    break;\r\n                case 1:\r\n                    out[name] = {\r\n                        type: BOOLEAN_TAG,\r\n                        value: false,\r\n                    };\r\n                    break;\r\n                case 2:\r\n                    out[name] = {\r\n                        type: BYTE_TAG,\r\n                        value: headers.getInt8(position++),\r\n                    };\r\n                    break;\r\n                case 3:\r\n                    out[name] = {\r\n                        type: SHORT_TAG,\r\n                        value: headers.getInt16(position, false),\r\n                    };\r\n                    position += 2;\r\n                    break;\r\n                case 4:\r\n                    out[name] = {\r\n                        type: INT_TAG,\r\n                        value: headers.getInt32(position, false),\r\n                    };\r\n                    position += 4;\r\n                    break;\r\n                case 5:\r\n                    out[name] = {\r\n                        type: LONG_TAG,\r\n                        value: new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)),\r\n                    };\r\n                    position += 8;\r\n                    break;\r\n                case 6:\r\n                    const binaryLength = headers.getUint16(position, false);\r\n                    position += 2;\r\n                    out[name] = {\r\n                        type: BINARY_TAG,\r\n                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength),\r\n                    };\r\n                    position += binaryLength;\r\n                    break;\r\n                case 7:\r\n                    const stringLength = headers.getUint16(position, false);\r\n                    position += 2;\r\n                    out[name] = {\r\n                        type: STRING_TAG,\r\n                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength)),\r\n                    };\r\n                    position += stringLength;\r\n                    break;\r\n                case 8:\r\n                    out[name] = {\r\n                        type: TIMESTAMP_TAG,\r\n                        value: new Date(new Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf()),\r\n                    };\r\n                    position += 8;\r\n                    break;\r\n                case 9:\r\n                    const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);\r\n                    position += 16;\r\n                    out[name] = {\r\n                        type: UUID_TAG,\r\n                        value: `${toHex(uuidBytes.subarray(0, 4))}-${toHex(uuidBytes.subarray(4, 6))}-${toHex(uuidBytes.subarray(6, 8))}-${toHex(uuidBytes.subarray(8, 10))}-${toHex(uuidBytes.subarray(10))}`,\r\n                    };\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unrecognized header type tag`);\r\n            }\r\n        }\r\n        return out;\r\n    }\r\n}\r\nvar HEADER_VALUE_TYPE;\r\n(function (HEADER_VALUE_TYPE) {\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolTrue\"] = 0] = \"boolTrue\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"boolFalse\"] = 1] = \"boolFalse\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byte\"] = 2] = \"byte\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"short\"] = 3] = \"short\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"integer\"] = 4] = \"integer\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"long\"] = 5] = \"long\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"byteArray\"] = 6] = \"byteArray\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"string\"] = 7] = \"string\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"timestamp\"] = 8] = \"timestamp\";\r\n    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE[\"uuid\"] = 9] = \"uuid\";\r\n})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));\r\nconst BOOLEAN_TAG = \"boolean\";\r\nconst BYTE_TAG = \"byte\";\r\nconst SHORT_TAG = \"short\";\r\nconst INT_TAG = \"integer\";\r\nconst LONG_TAG = \"long\";\r\nconst BINARY_TAG = \"binary\";\r\nconst STRING_TAG = \"string\";\r\nconst TIMESTAMP_TAG = \"timestamp\";\r\nconst UUID_TAG = \"uuid\";\r\nconst UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;\r\n", "import { Crc32 } from \"@aws-crypto/crc32\";\r\nconst PRELUDE_MEMBER_LENGTH = 4;\r\nconst PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;\r\nconst CHECKSUM_LENGTH = 4;\r\nconst MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;\r\nexport function splitMessage({ byteLength, byteOffset, buffer }) {\r\n    if (byteLength < MINIMUM_MESSAGE_LENGTH) {\r\n        throw new Error(\"Provided message too short to accommodate event stream message overhead\");\r\n    }\r\n    const view = new DataView(buffer, byteOffset, byteLength);\r\n    const messageLength = view.getUint32(0, false);\r\n    if (byteLength !== messageLength) {\r\n        throw new Error(\"Reported message length does not match received message length\");\r\n    }\r\n    const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);\r\n    const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);\r\n    const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);\r\n    const checksummer = new Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));\r\n    if (expectedPreludeChecksum !== checksummer.digest()) {\r\n        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);\r\n    }\r\n    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));\r\n    if (expectedMessageChecksum !== checksummer.digest()) {\r\n        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);\r\n    }\r\n    return {\r\n        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),\r\n        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH)),\r\n    };\r\n}\r\n", "import { Crc32 } from \"@aws-crypto/crc32\";\r\nimport { HeaderMarshaller } from \"./HeaderMarshaller\";\r\nimport { splitMessage } from \"./splitMessage\";\r\nexport class EventStreamCodec {\r\n    constructor(toUtf8, fromUtf8) {\r\n        this.headerMarshaller = new HeaderMarshaller(toUtf8, fromUtf8);\r\n        this.messageBuffer = [];\r\n        this.isEndOfStream = false;\r\n    }\r\n    feed(message) {\r\n        this.messageBuffer.push(this.decode(message));\r\n    }\r\n    endOfStream() {\r\n        this.isEndOfStream = true;\r\n    }\r\n    getMessage() {\r\n        const message = this.messageBuffer.pop();\r\n        const isEndOfStream = this.isEndOfStream;\r\n        return {\r\n            getMessage() {\r\n                return message;\r\n            },\r\n            isEndOfStream() {\r\n                return isEndOfStream;\r\n            },\r\n        };\r\n    }\r\n    getAvailableMessages() {\r\n        const messages = this.messageBuffer;\r\n        this.messageBuffer = [];\r\n        const isEndOfStream = this.isEndOfStream;\r\n        return {\r\n            getMessages() {\r\n                return messages;\r\n            },\r\n            isEndOfStream() {\r\n                return isEndOfStream;\r\n            },\r\n        };\r\n    }\r\n    encode({ headers: rawHeaders, body }) {\r\n        const headers = this.headerMarshaller.format(rawHeaders);\r\n        const length = headers.byteLength + body.byteLength + 16;\r\n        const out = new Uint8Array(length);\r\n        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);\r\n        const checksum = new Crc32();\r\n        view.setUint32(0, length, false);\r\n        view.setUint32(4, headers.byteLength, false);\r\n        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);\r\n        out.set(headers, 12);\r\n        out.set(body, headers.byteLength + 12);\r\n        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);\r\n        return out;\r\n    }\r\n    decode(message) {\r\n        const { headers, body } = splitMessage(message);\r\n        return { headers: this.headerMarshaller.parse(headers), body };\r\n    }\r\n    formatHeaders(rawHeaders) {\r\n        return this.headerMarshaller.format(rawHeaders);\r\n    }\r\n}\r\n", "export class MessageDecoderStream {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n    [Symbol.asyncIterator]() {\r\n        return this.asyncIterator();\r\n    }\r\n    async *asyncIterator() {\r\n        for await (const bytes of this.options.inputStream) {\r\n            const decoded = this.options.decoder.decode(bytes);\r\n            yield decoded;\r\n        }\r\n    }\r\n}\r\n", "export class MessageEncoderStream {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n    [Symbol.asyncIterator]() {\r\n        return this.asyncIterator();\r\n    }\r\n    async *asyncIterator() {\r\n        for await (const msg of this.options.messageStream) {\r\n            const encoded = this.options.encoder.encode(msg);\r\n            yield encoded;\r\n        }\r\n        if (this.options.includeEndFrame) {\r\n            yield new Uint8Array(0);\r\n        }\r\n    }\r\n}\r\n", "export class SmithyMessageDecoderStream {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n    [Symbol.asyncIterator]() {\r\n        return this.asyncIterator();\r\n    }\r\n    async *asyncIterator() {\r\n        for await (const message of this.options.messageStream) {\r\n            const deserialized = await this.options.deserializer(message);\r\n            if (deserialized === undefined)\r\n                continue;\r\n            yield deserialized;\r\n        }\r\n    }\r\n}\r\n", "export class SmithyMessageEncoderStream {\r\n    constructor(options) {\r\n        this.options = options;\r\n    }\r\n    [Symbol.asyncIterator]() {\r\n        return this.asyncIterator();\r\n    }\r\n    async *asyncIterator() {\r\n        for await (const chunk of this.options.inputStream) {\r\n            const payloadBuf = this.options.serializer(chunk);\r\n            yield payloadBuf;\r\n        }\r\n    }\r\n}\r\n", "export function getChunkedStream(source) {\r\n    let currentMessageTotalLength = 0;\r\n    let currentMessagePendingLength = 0;\r\n    let currentMessage = null;\r\n    let messageLengthBuffer = null;\r\n    const allocateMessage = (size) => {\r\n        if (typeof size !== \"number\") {\r\n            throw new Error(\"Attempted to allocate an event message where size was not a number: \" + size);\r\n        }\r\n        currentMessageTotalLength = size;\r\n        currentMessagePendingLength = 4;\r\n        currentMessage = new Uint8Array(size);\r\n        const currentMessageView = new DataView(currentMessage.buffer);\r\n        currentMessageView.setUint32(0, size, false);\r\n    };\r\n    const iterator = async function* () {\r\n        const sourceIterator = source[Symbol.asyncIterator]();\r\n        while (true) {\r\n            const { value, done } = await sourceIterator.next();\r\n            if (done) {\r\n                if (!currentMessageTotalLength) {\r\n                    return;\r\n                }\r\n                else if (currentMessageTotalLength === currentMessagePendingLength) {\r\n                    yield currentMessage;\r\n                }\r\n                else {\r\n                    throw new Error(\"Truncated event message received.\");\r\n                }\r\n                return;\r\n            }\r\n            const chunkLength = value.length;\r\n            let currentOffset = 0;\r\n            while (currentOffset < chunkLength) {\r\n                if (!currentMessage) {\r\n                    const bytesRemaining = chunkLength - currentOffset;\r\n                    if (!messageLengthBuffer) {\r\n                        messageLengthBuffer = new Uint8Array(4);\r\n                    }\r\n                    const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);\r\n                    messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);\r\n                    currentMessagePendingLength += numBytesForTotal;\r\n                    currentOffset += numBytesForTotal;\r\n                    if (currentMessagePendingLength < 4) {\r\n                        break;\r\n                    }\r\n                    allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));\r\n                    messageLengthBuffer = null;\r\n                }\r\n                const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);\r\n                currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);\r\n                currentMessagePendingLength += numBytesToWrite;\r\n                currentOffset += numBytesToWrite;\r\n                if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {\r\n                    yield currentMessage;\r\n                    currentMessage = null;\r\n                    currentMessageTotalLength = 0;\r\n                    currentMessagePendingLength = 0;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return {\r\n        [Symbol.asyncIterator]: iterator,\r\n    };\r\n}\r\n", "export function getUnmarshalledStream(source, options) {\r\n    const messageUnmarshaller = getMessageUnmarshaller(options.deserializer, options.toUtf8);\r\n    return {\r\n        [Symbol.asyncIterator]: async function* () {\r\n            for await (const chunk of source) {\r\n                const message = options.eventStreamCodec.decode(chunk);\r\n                const type = await messageUnmarshaller(message);\r\n                if (type === undefined)\r\n                    continue;\r\n                yield type;\r\n            }\r\n        },\r\n    };\r\n}\r\nexport function getMessageUnmarshaller(deserializer, toUtf8) {\r\n    return async function (message) {\r\n        const { value: messageType } = message.headers[\":message-type\"];\r\n        if (messageType === \"error\") {\r\n            const unmodeledError = new Error(message.headers[\":error-message\"].value || \"UnknownError\");\r\n            unmodeledError.name = message.headers[\":error-code\"].value;\r\n            throw unmodeledError;\r\n        }\r\n        else if (messageType === \"exception\") {\r\n            const code = message.headers[\":exception-type\"].value;\r\n            const exception = { [code]: message };\r\n            const deserializedException = await deserializer(exception);\r\n            if (deserializedException.$unknown) {\r\n                const error = new Error(toUtf8(message.body));\r\n                error.name = code;\r\n                throw error;\r\n            }\r\n            throw deserializedException[code];\r\n        }\r\n        else if (messageType === \"event\") {\r\n            const event = {\r\n                [message.headers[\":event-type\"].value]: message,\r\n            };\r\n            const deserialized = await deserializer(event);\r\n            if (deserialized.$unknown)\r\n                return;\r\n            return deserialized;\r\n        }\r\n        else {\r\n            throw Error(`Unrecognizable event type: ${message.headers[\":event-type\"].value}`);\r\n        }\r\n    };\r\n}\r\n", "import { EventStreamCodec, MessageDecoderStream, MessageEncoderStream, SmithyMessageDecoderStream, SmithyMessageEncoderStream, } from \"@smithy/eventstream-codec\";\r\nimport { getChunkedStream } from \"./getChunkedStream\";\r\nimport { getMessageUnmarshaller } from \"./getUnmarshalledStream\";\r\nexport class EventStreamMarshaller {\r\n    constructor({ utf8Encoder, utf8Decoder }) {\r\n        this.eventStreamCodec = new EventStreamCodec(utf8Encoder, utf8Decoder);\r\n        this.utfEncoder = utf8Encoder;\r\n    }\r\n    deserialize(body, deserializer) {\r\n        const inputStream = getChunkedStream(body);\r\n        return new SmithyMessageDecoderStream({\r\n            messageStream: new MessageDecoderStream({ inputStream, decoder: this.eventStreamCodec }),\r\n            deserializer: getMessageUnmarshaller(deserializer, this.utfEncoder),\r\n        });\r\n    }\r\n    serialize(inputStream, serializer) {\r\n        return new MessageEncoderStream({\r\n            messageStream: new SmithyMessageEncoderStream({ inputStream, serializer }),\r\n            encoder: this.eventStreamCodec,\r\n            includeEndFrame: true,\r\n        });\r\n    }\r\n}\r\n", "export const readableStreamtoIterable = (readableStream) => ({\r\n    [Symbol.asyncIterator]: async function* () {\r\n        const reader = readableStream.getReader();\r\n        try {\r\n            while (true) {\r\n                const { done, value } = await reader.read();\r\n                if (done)\r\n                    return;\r\n                yield value;\r\n            }\r\n        }\r\n        finally {\r\n            reader.releaseLock();\r\n        }\r\n    },\r\n});\r\nexport const iterableToReadableStream = (asyncIterable) => {\r\n    const iterator = asyncIterable[Symbol.asyncIterator]();\r\n    return new ReadableStream({\r\n        async pull(controller) {\r\n            const { done, value } = await iterator.next();\r\n            if (done) {\r\n                return controller.close();\r\n            }\r\n            controller.enqueue(value);\r\n        },\r\n    });\r\n};\r\n", "import { EventStreamMarshaller as UniversalEventStreamMarshaller } from \"@smithy/eventstream-serde-universal\";\r\nimport { iterableToReadableStream, readableStreamtoIterable } from \"./utils\";\r\nexport class EventStreamMarshaller {\r\n    constructor({ utf8Encoder, utf8Decoder }) {\r\n        this.universalMarshaller = new UniversalEventStreamMarshaller({\r\n            utf8Decoder,\r\n            utf8Encoder,\r\n        });\r\n    }\r\n    deserialize(body, deserializer) {\r\n        const bodyIterable = isReadableStream(body) ? readableStreamtoIterable(body) : body;\r\n        return this.universalMarshaller.deserialize(bodyIterable, deserializer);\r\n    }\r\n    serialize(input, serializer) {\r\n        const serialziedIterable = this.universalMarshaller.serialize(input, serializer);\r\n        return typeof ReadableStream === \"function\" ? iterableToReadableStream(serialziedIterable) : serialziedIterable;\r\n    }\r\n}\r\nconst isReadableStream = (body) => typeof ReadableStream === \"function\" && body instanceof ReadableStream;\r\n", "import { EventStreamMarshaller } from \"./EventStreamMarshaller\";\r\nexport const eventStreamSerdeProvider = (options) => new EventStreamMarshaller(options);\r\n"],
  "mappings": "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AAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;AAAA,EAAY;AAAA,EAAY;AAAA,EAAY;AAAA,EACpC;A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",
  "names": ["fromUtf8", "a_lookUpTable", "AwsCrc32", "Crc32", "fromUtf8", "HEADER_VALUE_TYPE", "fromUtf8", "EventStreamMarshaller", "EventStreamMarshaller"]
}
